#!/usr/bin/env python
"""
ุณูุฑูุจุช ุจุฏุก ุชุดุบูู ูุงูุฉ ุฃูุธูุฉ ุงูุจูุช - Startup All Bot Systems

ูููู ูุฐุง ุงูุณูุฑูุจุช ุจุจุฏุก ุชุดุบูู ูุงูุฉ ุฃูุธูุฉ ุงูุจูุช ูุงููุฑุงูุจุฉ ูุถูุงู ุงุณุชูุฑุงุฑูุฉ ุงูุนูู:
1. ุจุฏุก ุชุดุบูู ูุธุงู Keep Alive ูู Replit
2. ุจุฏุก ุชุดุบูู ูุธุงู ูุจุถุงุช ุชูููุฌุฑุงู
3. ุจุฏุก ุชุดุบูู ุงูุจูุช ุงูุฑุฆูุณู
4. ุจุฏุก ุชุดุบูู ูุธุงู ุงููุฑุงูุจุฉ ูุงูุฅุดุฑุงู
"""

import logging
import os
import subprocess
import sys
import threading
import time

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='startup.log'
)
logger = logging.getLogger("StartupSystem")

# ุชูุธูู ูููุงุช ุงูุนูุงูุงุช ูุงูุนูููุงุช ุงููุฏููุฉ
def cleanup_marker_files():
    """ุชูุธูู ูููุงุช ุงูุนูุงูุงุช ุงููุฏููุฉ"""
    markers = [
        "bot_shutdown_marker",
        "watchdog_ping",
        "bot_restart_marker",
        "restart_requested.log",
        "bot_process.pid"
    ]
    
    for marker in markers:
        if os.path.exists(marker):
            try:
                os.remove(marker)
                logger.info(f"โ ุชู ุญุฐู ููู ุงูุนูุงูุฉ ุงููุฏูู: {marker}")
            except Exception as e:
                logger.error(f"โ ุฎุทุฃ ูู ุญุฐู ููู ุงูุนูุงูุฉ: {marker}: {e}")

# ุจุฏุก ุชุดุบูู ุฎุฏูุฉ Keep Alive
def start_keep_alive():
    """ุจุฏุก ุชุดุบูู ุฎุฏูุฉ Keep Alive ูู Replit"""
    try:
        logger.info("๐ ุฌุงุฑู ุจุฏุก ุชุดุบูู ุฎุฏูุฉ Keep Alive...")
        process = subprocess.Popen(
            [sys.executable, 'keep_alive.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        logger.info(f"โ ุชู ุจุฏุก ุชุดุบูู ุฎุฏูุฉ Keep Alive ุจูุฌุงุญ (PID: {process.pid})")
        return process.pid
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุจุฏุก ุชุดุบูู ุฎุฏูุฉ Keep Alive: {e}")
        return None

# ุจุฏุก ุชุดุบูู ูุธุงู ูุจุถุงุช ุชูููุฌุฑุงู
def start_telegram_alive():
    """ุจุฏุก ุชุดุบูู ูุธุงู ูุจุถุงุช ุชูููุฌุฑุงู"""
    try:
        logger.info("๐ ุฌุงุฑู ุจุฏุก ุชุดุบูู ูุธุงู ูุจุถุงุช ุชูููุฌุฑุงู...")
        process = subprocess.Popen(
            [sys.executable, 'keep_telegram_alive.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        logger.info(f"โ ุชู ุจุฏุก ุชุดุบูู ูุธุงู ูุจุถุงุช ุชูููุฌุฑุงู ุจูุฌุงุญ (PID: {process.pid})")
        return process.pid
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุจุฏุก ุชุดุบูู ูุธุงู ูุจุถุงุช ุชูููุฌุฑุงู: {e}")
        return None

# ุจุฏุก ุชุดุบูู ุงูุจูุช ุงูุฑุฆูุณู
def start_bot():
    """ุจุฏุก ุชุดุบูู ุงูุจูุช ุงูุฑุฆูุณู"""
    try:
        logger.info("๐ ุฌุงุฑู ุจุฏุก ุชุดุบูู ุงูุจูุช ุงูุฑุฆูุณู...")
        
        # ุชุนููู ุนูุงูุฉ ูุงุณุชุฎุฏุงููุง ูู ุงููุธููุฉ ุงููุฏูุฌุฉ ูู ุงูุจูุช
        with open("bot_start_clean", "w") as f:
            f.write("1")
        
        process = subprocess.Popen(
            [sys.executable, 'bot.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # ุญูุธ ูุนุฑู ุงูุนูููุฉ
        with open("bot_process.pid", "w") as f:
            f.write(str(process.pid))
        
        logger.info(f"โ ุชู ุจุฏุก ุชุดุบูู ุงูุจูุช ุงูุฑุฆูุณู ุจูุฌุงุญ (PID: {process.pid})")
        return process.pid
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุจุฏุก ุชุดุบูู ุงูุจูุช ุงูุฑุฆูุณู: {e}")
        return None

# ุจุฏุก ุชุดุบูู ูุธุงู ุงููุฑุงูุจุฉ ูุงูุฅุดุฑุงู
def start_supervisor():
    """ุจุฏุก ุชุดุบูู ูุธุงู ุงููุฑุงูุจุฉ ูุงูุฅุดุฑุงู"""
    try:
        logger.info("๐ ุฌุงุฑู ุจุฏุก ุชุดุบูู ูุธุงู ุงููุฑุงูุจุฉ ูุงูุฅุดุฑุงู...")
        process = subprocess.Popen(
            [sys.executable, 'telegram_supervisor.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        logger.info(f"โ ุชู ุจุฏุก ุชุดุบูู ูุธุงู ุงููุฑุงูุจุฉ ูุงูุฅุดุฑุงู ุจูุฌุงุญ (PID: {process.pid})")
        return process.pid
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุจุฏุก ุชุดุบูู ูุธุงู ุงููุฑุงูุจุฉ ูุงูุฅุดุฑุงู: {e}")
        return None

def start_all_systems():
    """ุจุฏุก ุชุดุบูู ูุงูุฉ ุงูุฃูุธูุฉ"""
    try:
        logger.info("๐ ุฌุงุฑู ุชูุธูู ูููุงุช ุงูุนูุงูุงุช ุงููุฏููุฉ...")
        cleanup_marker_files()
        
        logger.info("๐ ุฌุงุฑู ุจุฏุก ุชุดุบูู ูุงูุฉ ุงูุฃูุธูุฉ...")
        
        # 1. ุจุฏุก ุชุดุบูู ุฎุฏูุฉ Keep Alive
        keep_alive_pid = start_keep_alive()
        
        # ุฅุถุงูุฉ ุชุฃุฎูุฑ ูุตูุฑ ูุจู ุจุฏุก ุงูุนูููุฉ ุงูุชุงููุฉ
        time.sleep(2)
        
        # 2. ุจุฏุก ุชุดุบูู ุงูุจูุช ุงูุฑุฆูุณู
        bot_pid = start_bot()
        
        # ุฅุถุงูุฉ ุชุฃุฎูุฑ ูุตูุฑ ูุจู ุจุฏุก ุงูุนูููุฉ ุงูุชุงููุฉ
        time.sleep(5)
        
        # 3. ุจุฏุก ุชุดุบูู ูุธุงู ูุจุถุงุช ุชูููุฌุฑุงู
        telegram_alive_pid = start_telegram_alive()
        
        # ุฅุถุงูุฉ ุชุฃุฎูุฑ ูุตูุฑ ูุจู ุจุฏุก ุงูุนูููุฉ ุงูุชุงููุฉ
        time.sleep(2)
        
        # 4. ุจุฏุก ุชุดุบูู ูุธุงู ุงููุฑุงูุจุฉ ูุงูุฅุดุฑุงู
        supervisor_pid = start_supervisor()
        
        # ุงูุชุญูู ูู ุจุฏุก ุชุดุบูู ูุงูุฉ ุงูุฃูุธูุฉ ุจูุฌุงุญ
        all_started = all([keep_alive_pid, bot_pid, telegram_alive_pid, supervisor_pid])
        
        if all_started:
            logger.info("โ ุชู ุจุฏุก ุชุดุบูู ูุงูุฉ ุงูุฃูุธูุฉ ุจูุฌุงุญ!")
            
            # ูุชุงุจุฉ ุณุฌู ุจูุนุฑูุงุช ุงูุนูููุงุช
            with open("system_pids.log", "w") as f:
                f.write(f"Keep Alive PID: {keep_alive_pid}\n")
                f.write(f"Bot PID: {bot_pid}\n")
                f.write(f"Telegram Alive PID: {telegram_alive_pid}\n")
                f.write(f"Supervisor PID: {supervisor_pid}\n")
            
            return True
        else:
            logger.error("โ ูุดู ูู ุจุฏุก ุชุดุบูู ุจุนุถ ุงูุฃูุธูุฉ!")
            return False
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")
        return False

if __name__ == "__main__":
    logger.info("๐ ุจุฏุก ุชุดุบูู ุณูุฑูุจุช ุจุฏุก ูุงูุฉ ุงูุฃูุธูุฉ...")
    
    try:
        # ุจุฏุก ุชุดุบูู ูุงูุฉ ุงูุฃูุธูุฉ ูู ุฎูุท ุฑุฆูุณู
        success = start_all_systems()
        
        if success:
            logger.info("โ ุชู ุชุดุบูู ูุงูุฉ ุงูุฃูุธูุฉ ุจูุฌุงุญ. ุงูุจูุช ุฌุงูุฒ ููุนูู!")
            print("โ ุชู ุชุดุบูู ูุงูุฉ ุงูุฃูุธูุฉ ุจูุฌุงุญ. ุงูุจูุช ุฌุงูุฒ ููุนูู!")
        else:
            logger.error("โ ูุดู ูู ุจุฏุก ุชุดุบูู ุจุนุถ ุงูุฃูุธูุฉ. ุฑุงุฌุน ุงูุณุฌูุงุช ููุชูุงุตูู.")
            print("โ ูุดู ูู ุจุฏุก ุชุดุบูู ุจุนุถ ุงูุฃูุธูุฉ. ุฑุงุฌุน ุงูุณุฌูุงุช ููุชูุงุตูู.")
        
        # ูุธู ูู ุงูุญููุฉ ุงูุฑุฆูุณูุฉ ููุญูุงุธ ุนูู ุนูู ุงูุจุฑูุงูุฌ
        try:
            while True:
                time.sleep(60)
        except KeyboardInterrupt:
            logger.info("๐ ุชู ุฅููุงู ุณูุฑูุจุช ุงูุชุดุบูู ุจูุงุณุทุฉ ุงููุณุชุฎุฏู")
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ: {e}")
        print(f"โ ุฎุทุฃ ูู ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ: {e}")